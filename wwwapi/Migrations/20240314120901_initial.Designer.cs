// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using wwwapi.Data;

#nullable disable

namespace wwwapi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240314120901_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("wwwapi.Models.Abilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<int>("CharismaId")
                        .HasColumnType("integer")
                        .HasColumnName("charisma_id");

                    b.Property<int>("ConstitutionId")
                        .HasColumnType("integer")
                        .HasColumnName("constitution_id");

                    b.Property<int>("DexterityId")
                        .HasColumnType("integer")
                        .HasColumnName("dexterity_id");

                    b.Property<int>("IntelligenceId")
                        .HasColumnType("integer")
                        .HasColumnName("intelligence_id");

                    b.Property<int>("StrengthID")
                        .HasColumnType("integer")
                        .HasColumnName("strength_id");

                    b.Property<int>("WisdomId")
                        .HasColumnType("integer")
                        .HasColumnName("wisdom_id");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.HasIndex("CharismaId");

                    b.HasIndex("ConstitutionId");

                    b.HasIndex("DexterityId");

                    b.HasIndex("IntelligenceId");

                    b.HasIndex("StrengthID");

                    b.HasIndex("WisdomId");

                    b.ToTable("abilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CharacterId = 1,
                            CharismaId = 6,
                            ConstitutionId = 3,
                            DexterityId = 2,
                            IntelligenceId = 4,
                            StrengthID = 1,
                            WisdomId = 5
                        },
                        new
                        {
                            Id = 2,
                            CharacterId = 2,
                            CharismaId = 12,
                            ConstitutionId = 9,
                            DexterityId = 8,
                            IntelligenceId = 10,
                            StrengthID = 7,
                            WisdomId = 11
                        });
                });

            modelBuilder.Entity("wwwapi.Models.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Prof")
                        .HasColumnType("boolean")
                        .HasColumnName("prof");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("ability");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Prof = false,
                            Value = 1
                        },
                        new
                        {
                            Id = 2,
                            Prof = true,
                            Value = 2
                        },
                        new
                        {
                            Id = 3,
                            Prof = false,
                            Value = 3
                        },
                        new
                        {
                            Id = 4,
                            Prof = true,
                            Value = 4
                        },
                        new
                        {
                            Id = 5,
                            Prof = false,
                            Value = 5
                        },
                        new
                        {
                            Id = 6,
                            Prof = true,
                            Value = 6
                        },
                        new
                        {
                            Id = 7,
                            Prof = false,
                            Value = 7
                        },
                        new
                        {
                            Id = 8,
                            Prof = true,
                            Value = 8
                        },
                        new
                        {
                            Id = 9,
                            Prof = false,
                            Value = 9
                        },
                        new
                        {
                            Id = 10,
                            Prof = true,
                            Value = 10
                        },
                        new
                        {
                            Id = 11,
                            Prof = false,
                            Value = 11
                        },
                        new
                        {
                            Id = 12,
                            Prof = true,
                            Value = 12
                        });
                });

            modelBuilder.Entity("wwwapi.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("characters");

                    b.HasData(
                        new
                        {
                            Id = 1
                        },
                        new
                        {
                            Id = 2
                        });
                });

            modelBuilder.Entity("wwwapi.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Exp")
                        .HasColumnType("boolean")
                        .HasColumnName("exp");

                    b.Property<bool>("Prof")
                        .HasColumnType("boolean")
                        .HasColumnName("prof");

                    b.HasKey("Id");

                    b.ToTable("skill");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Exp = false,
                            Prof = false
                        },
                        new
                        {
                            Id = 2,
                            Exp = false,
                            Prof = false
                        },
                        new
                        {
                            Id = 3,
                            Exp = false,
                            Prof = true
                        },
                        new
                        {
                            Id = 4,
                            Exp = false,
                            Prof = false
                        },
                        new
                        {
                            Id = 5,
                            Exp = true,
                            Prof = false
                        },
                        new
                        {
                            Id = 6,
                            Exp = false,
                            Prof = true
                        },
                        new
                        {
                            Id = 7,
                            Exp = false,
                            Prof = false
                        },
                        new
                        {
                            Id = 8,
                            Exp = false,
                            Prof = false
                        },
                        new
                        {
                            Id = 9,
                            Exp = false,
                            Prof = true
                        },
                        new
                        {
                            Id = 10,
                            Exp = true,
                            Prof = false
                        },
                        new
                        {
                            Id = 11,
                            Exp = false,
                            Prof = false
                        },
                        new
                        {
                            Id = 12,
                            Exp = false,
                            Prof = true
                        },
                        new
                        {
                            Id = 13,
                            Exp = false,
                            Prof = false
                        },
                        new
                        {
                            Id = 14,
                            Exp = false,
                            Prof = false
                        },
                        new
                        {
                            Id = 15,
                            Exp = true,
                            Prof = true
                        },
                        new
                        {
                            Id = 16,
                            Exp = false,
                            Prof = false
                        },
                        new
                        {
                            Id = 17,
                            Exp = false,
                            Prof = false
                        },
                        new
                        {
                            Id = 18,
                            Exp = false,
                            Prof = true
                        },
                        new
                        {
                            Id = 19,
                            Exp = false,
                            Prof = false
                        },
                        new
                        {
                            Id = 20,
                            Exp = true,
                            Prof = false
                        },
                        new
                        {
                            Id = 21,
                            Exp = false,
                            Prof = true
                        },
                        new
                        {
                            Id = 22,
                            Exp = false,
                            Prof = false
                        },
                        new
                        {
                            Id = 23,
                            Exp = false,
                            Prof = false
                        },
                        new
                        {
                            Id = 24,
                            Exp = false,
                            Prof = true
                        },
                        new
                        {
                            Id = 25,
                            Exp = true,
                            Prof = false
                        },
                        new
                        {
                            Id = 26,
                            Exp = false,
                            Prof = false
                        },
                        new
                        {
                            Id = 27,
                            Exp = false,
                            Prof = true
                        },
                        new
                        {
                            Id = 28,
                            Exp = false,
                            Prof = false
                        },
                        new
                        {
                            Id = 29,
                            Exp = false,
                            Prof = false
                        },
                        new
                        {
                            Id = 30,
                            Exp = true,
                            Prof = true
                        },
                        new
                        {
                            Id = 31,
                            Exp = false,
                            Prof = false
                        },
                        new
                        {
                            Id = 32,
                            Exp = false,
                            Prof = false
                        },
                        new
                        {
                            Id = 33,
                            Exp = false,
                            Prof = true
                        },
                        new
                        {
                            Id = 34,
                            Exp = false,
                            Prof = false
                        },
                        new
                        {
                            Id = 35,
                            Exp = true,
                            Prof = false
                        },
                        new
                        {
                            Id = 36,
                            Exp = false,
                            Prof = true
                        },
                        new
                        {
                            Id = 37,
                            Exp = false,
                            Prof = false
                        });
                });

            modelBuilder.Entity("wwwapi.Models.Skills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AcrobaticsId")
                        .HasColumnType("integer")
                        .HasColumnName("acrobatics_id");

                    b.Property<int>("AnimalHandlingId")
                        .HasColumnType("integer")
                        .HasColumnName("animal_handling_id");

                    b.Property<int>("ArcanaId")
                        .HasColumnType("integer")
                        .HasColumnName("arcana_id");

                    b.Property<int>("AthleticsId")
                        .HasColumnType("integer")
                        .HasColumnName("athletics_id");

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<int>("DeceptionId")
                        .HasColumnType("integer")
                        .HasColumnName("deception:id");

                    b.Property<int>("HistoryId")
                        .HasColumnType("integer")
                        .HasColumnName("history_id");

                    b.Property<int>("InsightId")
                        .HasColumnType("integer")
                        .HasColumnName("insight_id");

                    b.Property<int>("IntimidationId")
                        .HasColumnType("integer")
                        .HasColumnName("intimidation_id");

                    b.Property<int>("InvestigationId")
                        .HasColumnType("integer")
                        .HasColumnName("investigation_id");

                    b.Property<int>("MedicineId")
                        .HasColumnType("integer")
                        .HasColumnName("medicine_id");

                    b.Property<int>("NatureId")
                        .HasColumnType("integer")
                        .HasColumnName("nature_id");

                    b.Property<int>("PerceptionId")
                        .HasColumnType("integer")
                        .HasColumnName("perception_id");

                    b.Property<int>("PerformanceId")
                        .HasColumnType("integer")
                        .HasColumnName("performance_id");

                    b.Property<int>("PersuationId")
                        .HasColumnType("integer")
                        .HasColumnName("persuation_id");

                    b.Property<int>("ReligionId")
                        .HasColumnType("integer")
                        .HasColumnName("religion_id");

                    b.Property<int>("SleightOfHandId")
                        .HasColumnType("integer")
                        .HasColumnName("sleight_of_hand_id");

                    b.Property<int>("StealthId")
                        .HasColumnType("integer")
                        .HasColumnName("stealth_id");

                    b.Property<int>("SurvivalId")
                        .HasColumnType("integer")
                        .HasColumnName("survival_id");

                    b.HasKey("Id");

                    b.HasIndex("AcrobaticsId");

                    b.HasIndex("AnimalHandlingId");

                    b.HasIndex("ArcanaId");

                    b.HasIndex("AthleticsId");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.HasIndex("DeceptionId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("InsightId");

                    b.HasIndex("IntimidationId");

                    b.HasIndex("InvestigationId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("NatureId");

                    b.HasIndex("PerceptionId");

                    b.HasIndex("PerformanceId");

                    b.HasIndex("PersuationId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("SleightOfHandId");

                    b.HasIndex("StealthId");

                    b.HasIndex("SurvivalId");

                    b.ToTable("skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcrobaticsId = 1,
                            AnimalHandlingId = 2,
                            ArcanaId = 3,
                            AthleticsId = 4,
                            CharacterId = 1,
                            DeceptionId = 5,
                            HistoryId = 6,
                            InsightId = 7,
                            IntimidationId = 8,
                            InvestigationId = 9,
                            MedicineId = 10,
                            NatureId = 11,
                            PerceptionId = 12,
                            PerformanceId = 13,
                            PersuationId = 14,
                            ReligionId = 15,
                            SleightOfHandId = 16,
                            StealthId = 17,
                            SurvivalId = 18
                        },
                        new
                        {
                            Id = 2,
                            AcrobaticsId = 19,
                            AnimalHandlingId = 20,
                            ArcanaId = 21,
                            AthleticsId = 22,
                            CharacterId = 2,
                            DeceptionId = 23,
                            HistoryId = 24,
                            InsightId = 25,
                            IntimidationId = 26,
                            InvestigationId = 27,
                            MedicineId = 28,
                            NatureId = 29,
                            PerceptionId = 30,
                            PerformanceId = 31,
                            PersuationId = 32,
                            ReligionId = 33,
                            SleightOfHandId = 34,
                            StealthId = 35,
                            SurvivalId = 36
                        });
                });

            modelBuilder.Entity("wwwapi.Models.Speed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("speed");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CharacterId = 1,
                            Value = 30
                        },
                        new
                        {
                            Id = 2,
                            CharacterId = 2,
                            Value = 35
                        });
                });

            modelBuilder.Entity("wwwapi.Models.Style", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<int>("Alignment")
                        .HasColumnType("integer")
                        .HasColumnName("alignment");

                    b.Property<int>("Background")
                        .HasColumnType("integer")
                        .HasColumnName("background");

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<int>("Class_")
                        .HasColumnType("integer")
                        .HasColumnName("class");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Eyes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("eyes");

                    b.Property<string>("Hair")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hair");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("height");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Race")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("race");

                    b.Property<string>("Skin")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("skin");

                    b.Property<string>("Width")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 21,
                            Alignment = 4,
                            Background = 2,
                            CharacterId = 1,
                            Class_ = 11,
                            Description = "Description",
                            Eyes = "Blue",
                            Hair = "Not blue",
                            Height = "2'11",
                            Name = "Name",
                            Race = "No",
                            Skin = "Blue",
                            Width = "2'6"
                        },
                        new
                        {
                            Id = 2,
                            Age = 22,
                            Alignment = 6,
                            Background = 1,
                            CharacterId = 2,
                            Class_ = 6,
                            Description = "Other Description",
                            Eyes = "Other Blue",
                            Hair = "Other Not blue",
                            Height = "4'11",
                            Name = "Other Name",
                            Race = "Other No",
                            Skin = "Other Blue",
                            Width = "1'6"
                        });
                });

            modelBuilder.Entity("wwwapi.Models.Abilities", b =>
                {
                    b.HasOne("wwwapi.Models.Character", null)
                        .WithOne("Abilities")
                        .HasForeignKey("wwwapi.Models.Abilities", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Ability", "Charisma")
                        .WithMany()
                        .HasForeignKey("CharismaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Ability", "Constitution")
                        .WithMany()
                        .HasForeignKey("ConstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Ability", "Dexterity")
                        .WithMany()
                        .HasForeignKey("DexterityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Ability", "Intelligence")
                        .WithMany()
                        .HasForeignKey("IntelligenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Ability", "Strength")
                        .WithMany()
                        .HasForeignKey("StrengthID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Ability", "Wisdom")
                        .WithMany()
                        .HasForeignKey("WisdomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Charisma");

                    b.Navigation("Constitution");

                    b.Navigation("Dexterity");

                    b.Navigation("Intelligence");

                    b.Navigation("Strength");

                    b.Navigation("Wisdom");
                });

            modelBuilder.Entity("wwwapi.Models.Skills", b =>
                {
                    b.HasOne("wwwapi.Models.Skill", "Acrobatics")
                        .WithMany()
                        .HasForeignKey("AcrobaticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Skill", "AnimalHandling")
                        .WithMany()
                        .HasForeignKey("AnimalHandlingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Skill", "Arcana")
                        .WithMany()
                        .HasForeignKey("ArcanaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Skill", "Athletics")
                        .WithMany()
                        .HasForeignKey("AthleticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Character", null)
                        .WithOne("Skills")
                        .HasForeignKey("wwwapi.Models.Skills", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Skill", "Deception")
                        .WithMany()
                        .HasForeignKey("DeceptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Skill", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Skill", "Insight")
                        .WithMany()
                        .HasForeignKey("InsightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Skill", "Intimidation")
                        .WithMany()
                        .HasForeignKey("IntimidationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Skill", "Investigation")
                        .WithMany()
                        .HasForeignKey("InvestigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Skill", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Skill", "Nature")
                        .WithMany()
                        .HasForeignKey("NatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Skill", "Perception")
                        .WithMany()
                        .HasForeignKey("PerceptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Skill", "Performance")
                        .WithMany()
                        .HasForeignKey("PerformanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Skill", "Persuation")
                        .WithMany()
                        .HasForeignKey("PersuationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Skill", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Skill", "SleightOfHand")
                        .WithMany()
                        .HasForeignKey("SleightOfHandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Skill", "Stealth")
                        .WithMany()
                        .HasForeignKey("StealthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wwwapi.Models.Skill", "Survival")
                        .WithMany()
                        .HasForeignKey("SurvivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Acrobatics");

                    b.Navigation("AnimalHandling");

                    b.Navigation("Arcana");

                    b.Navigation("Athletics");

                    b.Navigation("Deception");

                    b.Navigation("History");

                    b.Navigation("Insight");

                    b.Navigation("Intimidation");

                    b.Navigation("Investigation");

                    b.Navigation("Medicine");

                    b.Navigation("Nature");

                    b.Navigation("Perception");

                    b.Navigation("Performance");

                    b.Navigation("Persuation");

                    b.Navigation("Religion");

                    b.Navigation("SleightOfHand");

                    b.Navigation("Stealth");

                    b.Navigation("Survival");
                });

            modelBuilder.Entity("wwwapi.Models.Speed", b =>
                {
                    b.HasOne("wwwapi.Models.Character", null)
                        .WithOne("Speed")
                        .HasForeignKey("wwwapi.Models.Speed", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wwwapi.Models.Style", b =>
                {
                    b.HasOne("wwwapi.Models.Character", null)
                        .WithOne("Style")
                        .HasForeignKey("wwwapi.Models.Style", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wwwapi.Models.Character", b =>
                {
                    b.Navigation("Abilities")
                        .IsRequired();

                    b.Navigation("Skills")
                        .IsRequired();

                    b.Navigation("Speed")
                        .IsRequired();

                    b.Navigation("Style")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
